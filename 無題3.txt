WEBアプリケーションの昨今の構造でも、WEBサーバ(NginxやApache HTTPD)→アプリケーションサーバ(TomcatやJBoss)→DBサーバの構成はよく使われます
基本的には、アプリケーションサーバに、Javaなどで作成したWebアプリケーションを配置してそこにロジックを搭載します。

ですので、Webサーバには直接公開してよい静的なHTMLやCSS/JS/画像などを配置して
アプリケーションサーバには非公開のもの（バックエンドのプログラムなど）を置くわけですが、お伝えしていただいた構成の場合は、WEBとAPサーバが同一マシンとのことですので、

実際にそういう構成を取ることがあるか？というと、アプリケーションの規模が小さければ、あります。

WEBサーバとAPサーバでは、そもそも動くプロセスが異なりますし、WEBサーバを公開するといっても、実際には公開ディレクトリを限定していて、さらにWEBサーバ〜APサーバの間は、通信を伝送させるためのミドルウェア経由で送受信をするため、WEBサーバがAPサーバの内容（ファイル）をそのまま公開でもしない限り、特に問題となることはありません。

また、これもWebアプリケーションが使われるようになる前からよくある事例ですが、DBサーバにロジックを配置する考え方はあるにはあるんですが、、それはDBサーバの方がWEBサーバよりもスペック高いときに使われる、ずいぶんと古い考え方です。

今でもDB側ｎ方がスペック高くても、しかしそれはデータベース管理ならびデータベース本体だけでメモリやCPUのリソースを使えるようにしますし、それ以外のものは極力配置しません。理由としては、データベースのパフォーマンスが悪くなるとそれがシステム全体に影響を及ぼしますし、問題発生時の切り分けを複雑にしないよう、データベースはデータベースだけに集約する、が常套手段です。

なお、データベース側にロジックを乗せるとしたら、それはデータベースに搭載させるロジック、具体的にはストアドプロシージャなどで作って、極力データベースのパフォーマンスを最優先させたときに使う手段ではあります。

そうでなくとも、データベースの規模が大きくなればなるほど、データベースの負荷はほぼすべてが検索に偏りますので、これを高速化、高い効率で行うことを是としているデータベースは、利用するメモリなども大きくなります。

ですのでデータベース側に余計なものを置きたくない、が実情になるのではないかと思います。